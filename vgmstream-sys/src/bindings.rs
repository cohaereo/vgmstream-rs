#![allow(non_upper_case_globals, non_snake_case, non_camel_case_types, unused)]
/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    const UNINIT: ::std::mem::MaybeUninit<_iobuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
pub type sample_t = i16;
pub type off_t = i64;
pub type offv_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STREAMFILE {
    pub read: unsafe extern "C" fn(
        sf: *mut _STREAMFILE,
        dst: *mut u8,
        offset: offv_t,
        length: usize,
    ) -> usize,

    pub get_size: unsafe extern "C" fn(sf: *mut _STREAMFILE) -> usize,
    pub get_offset: unsafe extern "C" fn(sf: *mut _STREAMFILE) -> offv_t,
    pub get_name: unsafe extern "C" fn(
        sf: *mut _STREAMFILE,
        name: *mut ::std::os::raw::c_char,
        name_size: usize,
    ),

    pub open: unsafe extern "C" fn(
        sf: *mut _STREAMFILE,
        filename: *const ::std::os::raw::c_char,
        buf_size: usize,
    ) -> *mut _STREAMFILE,

    pub close: unsafe extern "C" fn(sf: *mut _STREAMFILE),
    pub stream_index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__STREAMFILE() {
    const UNINIT: ::std::mem::MaybeUninit<_STREAMFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_STREAMFILE>(),
        56usize,
        concat!("Size of: ", stringify!(_STREAMFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_STREAMFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_STREAMFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAMFILE),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAMFILE),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAMFILE),
            "::",
            stringify!(get_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAMFILE),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAMFILE),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAMFILE),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_index) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_STREAMFILE),
            "::",
            stringify!(stream_index)
        )
    );
}
pub type STREAMFILE = _STREAMFILE;
extern "C" {
    pub fn open_stdio_streamfile(filename: *const ::std::os::raw::c_char) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_stdio_streamfile_by_file(
        file: *mut FILE,
        filename: *const ::std::os::raw::c_char,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_buffer_streamfile(sf: *mut STREAMFILE, buffer_size: usize) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_buffer_streamfile_f(sf: *mut STREAMFILE, buffer_size: usize) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_wrap_streamfile(sf: *mut STREAMFILE) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_wrap_streamfile_f(sf: *mut STREAMFILE) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_clamp_streamfile(
        sf: *mut STREAMFILE,
        start: offv_t,
        size: usize,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_clamp_streamfile_f(
        sf: *mut STREAMFILE,
        start: offv_t,
        size: usize,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_io_streamfile(
        sf: *mut STREAMFILE,
        data: *mut ::std::os::raw::c_void,
        data_size: usize,
        read_callback: *mut ::std::os::raw::c_void,
        size_callback: *mut ::std::os::raw::c_void,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_io_streamfile_f(
        sf: *mut STREAMFILE,
        data: *mut ::std::os::raw::c_void,
        data_size: usize,
        read_callback: *mut ::std::os::raw::c_void,
        size_callback: *mut ::std::os::raw::c_void,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_io_streamfile_ex(
        sf: *mut STREAMFILE,
        data: *mut ::std::os::raw::c_void,
        data_size: usize,
        read_callback: *mut ::std::os::raw::c_void,
        size_callback: *mut ::std::os::raw::c_void,
        init_callback: *mut ::std::os::raw::c_void,
        close_callback: *mut ::std::os::raw::c_void,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_io_streamfile_ex_f(
        sf: *mut STREAMFILE,
        data: *mut ::std::os::raw::c_void,
        data_size: usize,
        read_callback: *mut ::std::os::raw::c_void,
        size_callback: *mut ::std::os::raw::c_void,
        init_callback: *mut ::std::os::raw::c_void,
        close_callback: *mut ::std::os::raw::c_void,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_fakename_streamfile(
        sf: *mut STREAMFILE,
        fakename: *const ::std::os::raw::c_char,
        fakeext: *const ::std::os::raw::c_char,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_fakename_streamfile_f(
        sf: *mut STREAMFILE,
        fakename: *const ::std::os::raw::c_char,
        fakeext: *const ::std::os::raw::c_char,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_multifile_streamfile(sfs: *mut *mut STREAMFILE, sfs_size: usize)
        -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_multifile_streamfile_f(
        sfs: *mut *mut STREAMFILE,
        sfs_size: usize,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn open_streamfile(
        sf: *mut STREAMFILE,
        pathname: *const ::std::os::raw::c_char,
    ) -> *mut STREAMFILE;
}
extern "C" {
    pub fn reopen_streamfile(sf: *mut STREAMFILE, buffer_size: usize) -> *mut STREAMFILE;
}
extern "C" {
    pub fn dump_streamfile(sf: *mut STREAMFILE, num: ::std::os::raw::c_int);
}
pub const PATH_LIMIT: _bindgen_ty_1 = 4096;
pub const STREAM_NAME_SIZE: _bindgen_ty_1 = 255;
pub const VGMSTREAM_MAX_CHANNELS: _bindgen_ty_1 = 64;
pub const VGMSTREAM_MIN_SAMPLE_RATE: _bindgen_ty_1 = 300;
pub const VGMSTREAM_MAX_SAMPLE_RATE: _bindgen_ty_1 = 192000;
pub const VGMSTREAM_MAX_SUBSONGS: _bindgen_ty_1 = 65535;
pub const VGMSTREAM_MAX_NUM_SAMPLES: _bindgen_ty_1 = 1000000000;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const coding_SILENCE: coding_t = 0;
pub const coding_PCM16LE: coding_t = 1;
pub const coding_PCM16BE: coding_t = 2;
pub const coding_PCM16_int: coding_t = 3;
pub const coding_PCM8: coding_t = 4;
pub const coding_PCM8_int: coding_t = 5;
pub const coding_PCM8_U: coding_t = 6;
pub const coding_PCM8_U_int: coding_t = 7;
pub const coding_PCM8_SB: coding_t = 8;
pub const coding_PCM4: coding_t = 9;
pub const coding_PCM4_U: coding_t = 10;
pub const coding_ULAW: coding_t = 11;
pub const coding_ULAW_int: coding_t = 12;
pub const coding_ALAW: coding_t = 13;
pub const coding_PCMFLOAT: coding_t = 14;
pub const coding_PCM24LE: coding_t = 15;
pub const coding_PCM24BE: coding_t = 16;
pub const coding_PCM32LE: coding_t = 17;
pub const coding_CRI_ADX: coding_t = 18;
pub const coding_CRI_ADX_fixed: coding_t = 19;
pub const coding_CRI_ADX_exp: coding_t = 20;
pub const coding_CRI_ADX_enc_8: coding_t = 21;
pub const coding_CRI_ADX_enc_9: coding_t = 22;
pub const coding_NGC_DSP: coding_t = 23;
pub const coding_NGC_DSP_subint: coding_t = 24;
pub const coding_NGC_DTK: coding_t = 25;
pub const coding_NGC_AFC: coding_t = 26;
pub const coding_VADPCM: coding_t = 27;
pub const coding_G721: coding_t = 28;
pub const coding_XA: coding_t = 29;
pub const coding_XA8: coding_t = 30;
pub const coding_XA_EA: coding_t = 31;
pub const coding_PSX: coding_t = 32;
pub const coding_PSX_badflags: coding_t = 33;
pub const coding_PSX_cfg: coding_t = 34;
pub const coding_PSX_pivotal: coding_t = 35;
pub const coding_HEVAG: coding_t = 36;
pub const coding_EA_XA: coding_t = 37;
pub const coding_EA_XA_int: coding_t = 38;
pub const coding_EA_XA_V2: coding_t = 39;
pub const coding_MAXIS_XA: coding_t = 40;
pub const coding_EA_XAS_V0: coding_t = 41;
pub const coding_EA_XAS_V1: coding_t = 42;
pub const coding_IMA: coding_t = 43;
pub const coding_IMA_int: coding_t = 44;
pub const coding_DVI_IMA: coding_t = 45;
pub const coding_DVI_IMA_int: coding_t = 46;
pub const coding_NW_IMA: coding_t = 47;
pub const coding_SNDS_IMA: coding_t = 48;
pub const coding_QD_IMA: coding_t = 49;
pub const coding_WV6_IMA: coding_t = 50;
pub const coding_HV_IMA: coding_t = 51;
pub const coding_FFTA2_IMA: coding_t = 52;
pub const coding_BLITZ_IMA: coding_t = 53;
pub const coding_MS_IMA: coding_t = 54;
pub const coding_MS_IMA_mono: coding_t = 55;
pub const coding_XBOX_IMA: coding_t = 56;
pub const coding_XBOX_IMA_mch: coding_t = 57;
pub const coding_XBOX_IMA_int: coding_t = 58;
pub const coding_NDS_IMA: coding_t = 59;
pub const coding_DAT4_IMA: coding_t = 60;
pub const coding_RAD_IMA: coding_t = 61;
pub const coding_RAD_IMA_mono: coding_t = 62;
pub const coding_APPLE_IMA4: coding_t = 63;
pub const coding_FSB_IMA: coding_t = 64;
pub const coding_WWISE_IMA: coding_t = 65;
pub const coding_REF_IMA: coding_t = 66;
pub const coding_AWC_IMA: coding_t = 67;
pub const coding_UBI_IMA: coding_t = 68;
pub const coding_UBI_SCE_IMA: coding_t = 69;
pub const coding_H4M_IMA: coding_t = 70;
pub const coding_MTF_IMA: coding_t = 71;
pub const coding_CD_IMA: coding_t = 72;
pub const coding_CRANKCASE_IMA: coding_t = 73;
pub const coding_MSADPCM: coding_t = 74;
pub const coding_MSADPCM_int: coding_t = 75;
pub const coding_MSADPCM_ck: coding_t = 76;
pub const coding_WS: coding_t = 77;
pub const coding_AICA: coding_t = 78;
pub const coding_AICA_int: coding_t = 79;
pub const coding_CP_YM: coding_t = 80;
pub const coding_ASKA: coding_t = 81;
pub const coding_NXAP: coding_t = 82;
pub const coding_TGC: coding_t = 83;
pub const coding_NDS_PROCYON: coding_t = 84;
pub const coding_L5_555: coding_t = 85;
pub const coding_LSF: coding_t = 86;
pub const coding_MTAF: coding_t = 87;
pub const coding_MTA2: coding_t = 88;
pub const coding_MC3: coding_t = 89;
pub const coding_FADPCM: coding_t = 90;
pub const coding_ASF: coding_t = 91;
pub const coding_DSA: coding_t = 92;
pub const coding_XMD: coding_t = 93;
pub const coding_TANTALUS: coding_t = 94;
pub const coding_PCFX: coding_t = 95;
pub const coding_OKI16: coding_t = 96;
pub const coding_OKI4S: coding_t = 97;
pub const coding_PTADPCM: coding_t = 98;
pub const coding_IMUSE: coding_t = 99;
pub const coding_COMPRESSWAVE: coding_t = 100;
pub const coding_SDX2: coding_t = 101;
pub const coding_SDX2_int: coding_t = 102;
pub const coding_CBD2: coding_t = 103;
pub const coding_CBD2_int: coding_t = 104;
pub const coding_SASSC: coding_t = 105;
pub const coding_DERF: coding_t = 106;
pub const coding_WADY: coding_t = 107;
pub const coding_NWA: coding_t = 108;
pub const coding_ACM: coding_t = 109;
pub const coding_CIRCUS_ADPCM: coding_t = 110;
pub const coding_UBI_ADPCM: coding_t = 111;
pub const coding_EA_MT: coding_t = 112;
pub const coding_CIRCUS_VQ: coding_t = 113;
pub const coding_RELIC: coding_t = 114;
pub const coding_CRI_HCA: coding_t = 115;
pub const coding_TAC: coding_t = 116;
pub const coding_ICE_RANGE: coding_t = 117;
pub const coding_ICE_DCT: coding_t = 118;
pub type coding_t = ::std::os::raw::c_int;
pub const layout_none: layout_t = 0;
pub const layout_interleave: layout_t = 1;
pub const layout_blocked_ast: layout_t = 2;
pub const layout_blocked_halpst: layout_t = 3;
pub const layout_blocked_xa: layout_t = 4;
pub const layout_blocked_ea_schl: layout_t = 5;
pub const layout_blocked_ea_1snh: layout_t = 6;
pub const layout_blocked_caf: layout_t = 7;
pub const layout_blocked_wsi: layout_t = 8;
pub const layout_blocked_str_snds: layout_t = 9;
pub const layout_blocked_ws_aud: layout_t = 10;
pub const layout_blocked_dec: layout_t = 11;
pub const layout_blocked_xvas: layout_t = 12;
pub const layout_blocked_vs: layout_t = 13;
pub const layout_blocked_mul: layout_t = 14;
pub const layout_blocked_gsb: layout_t = 15;
pub const layout_blocked_thp: layout_t = 16;
pub const layout_blocked_filp: layout_t = 17;
pub const layout_blocked_ea_swvr: layout_t = 18;
pub const layout_blocked_adm: layout_t = 19;
pub const layout_blocked_mxch: layout_t = 20;
pub const layout_blocked_ivaud: layout_t = 21;
pub const layout_blocked_ps2_iab: layout_t = 22;
pub const layout_blocked_vs_str: layout_t = 23;
pub const layout_blocked_rws: layout_t = 24;
pub const layout_blocked_hwas: layout_t = 25;
pub const layout_blocked_ea_sns: layout_t = 26;
pub const layout_blocked_awc: layout_t = 27;
pub const layout_blocked_vgs: layout_t = 28;
pub const layout_blocked_xwav: layout_t = 29;
pub const layout_blocked_xvag_subsong: layout_t = 30;
pub const layout_blocked_ea_wve_au00: layout_t = 31;
pub const layout_blocked_ea_wve_ad10: layout_t = 32;
pub const layout_blocked_sthd: layout_t = 33;
pub const layout_blocked_h4m: layout_t = 34;
pub const layout_blocked_xa_aiff: layout_t = 35;
pub const layout_blocked_vs_square: layout_t = 36;
pub const layout_blocked_vid1: layout_t = 37;
pub const layout_blocked_ubi_sce: layout_t = 38;
pub const layout_blocked_tt_ad: layout_t = 39;
pub const layout_segmented: layout_t = 40;
pub const layout_layered: layout_t = 41;
pub type layout_t = ::std::os::raw::c_int;
pub const meta_SILENCE: meta_t = 0;
pub const meta_DSP_STD: meta_t = 1;
pub const meta_DSP_CSTR: meta_t = 2;
pub const meta_DSP_RS03: meta_t = 3;
pub const meta_DSP_STM: meta_t = 4;
pub const meta_AGSC: meta_t = 5;
pub const meta_CSMP: meta_t = 6;
pub const meta_RFRM: meta_t = 7;
pub const meta_DSP_MPDSP: meta_t = 8;
pub const meta_DSP_JETTERS: meta_t = 9;
pub const meta_DSP_MSS: meta_t = 10;
pub const meta_DSP_GCM: meta_t = 11;
pub const meta_DSP_STR: meta_t = 12;
pub const meta_DSP_SADB: meta_t = 13;
pub const meta_DSP_WSI: meta_t = 14;
pub const meta_IDSP_TT: meta_t = 15;
pub const meta_MUS_KROME: meta_t = 16;
pub const meta_DSP_WII_WSD: meta_t = 17;
pub const meta_WII_NDP: meta_t = 18;
pub const meta_DSP_YGO: meta_t = 19;
pub const meta_STRM: meta_t = 20;
pub const meta_RSTM: meta_t = 21;
pub const meta_AFC: meta_t = 22;
pub const meta_AST: meta_t = 23;
pub const meta_RWSD: meta_t = 24;
pub const meta_RWAR: meta_t = 25;
pub const meta_RWAV: meta_t = 26;
pub const meta_CWAV: meta_t = 27;
pub const meta_FWAV: meta_t = 28;
pub const meta_THP: meta_t = 29;
pub const meta_SWAV: meta_t = 30;
pub const meta_NDS_RRDS: meta_t = 31;
pub const meta_BNS: meta_t = 32;
pub const meta_BTSND: meta_t = 33;
pub const meta_ADX_03: meta_t = 34;
pub const meta_ADX_04: meta_t = 35;
pub const meta_ADX_05: meta_t = 36;
pub const meta_AIX: meta_t = 37;
pub const meta_AAX: meta_t = 38;
pub const meta_UTF_DSP: meta_t = 39;
pub const meta_DTK: meta_t = 40;
pub const meta_RSF: meta_t = 41;
pub const meta_HALPST: meta_t = 42;
pub const meta_GCSW: meta_t = 43;
pub const meta_CAF: meta_t = 44;
pub const meta_MYSPD: meta_t = 45;
pub const meta_HIS: meta_t = 46;
pub const meta_BNSF: meta_t = 47;
pub const meta_XA: meta_t = 48;
pub const meta_ADS: meta_t = 49;
pub const meta_NPS: meta_t = 50;
pub const meta_RXWS: meta_t = 51;
pub const meta_RAW_INT: meta_t = 52;
pub const meta_EXST: meta_t = 53;
pub const meta_SVAG_KCET: meta_t = 54;
pub const meta_PS_HEADERLESS: meta_t = 55;
pub const meta_MIB_MIH: meta_t = 56;
pub const meta_PS2_MIC: meta_t = 57;
pub const meta_VAG: meta_t = 58;
pub const meta_VAG_custom: meta_t = 59;
pub const meta_AAAP: meta_t = 60;
pub const meta_SEB: meta_t = 61;
pub const meta_STR_WAV: meta_t = 62;
pub const meta_ILD: meta_t = 63;
pub const meta_PWB: meta_t = 64;
pub const meta_VPK: meta_t = 65;
pub const meta_PS2_BMDX: meta_t = 66;
pub const meta_PS2_IVB: meta_t = 67;
pub const meta_PS2_SND: meta_t = 68;
pub const meta_SVS: meta_t = 69;
pub const meta_XSS: meta_t = 70;
pub const meta_SL3: meta_t = 71;
pub const meta_HGC1: meta_t = 72;
pub const meta_AUS: meta_t = 73;
pub const meta_RWS: meta_t = 74;
pub const meta_FSB1: meta_t = 75;
pub const meta_FSB2: meta_t = 76;
pub const meta_FSB3: meta_t = 77;
pub const meta_FSB4: meta_t = 78;
pub const meta_FSB5: meta_t = 79;
pub const meta_RWAX: meta_t = 80;
pub const meta_XWB: meta_t = 81;
pub const meta_PS2_XA30: meta_t = 82;
pub const meta_MUSC: meta_t = 83;
pub const meta_MUSX: meta_t = 84;
pub const meta_FILP: meta_t = 85;
pub const meta_IKM: meta_t = 86;
pub const meta_STER: meta_t = 87;
pub const meta_BG00: meta_t = 88;
pub const meta_RSTM_ROCKSTAR: meta_t = 89;
pub const meta_PS2_KCES: meta_t = 90;
pub const meta_HXD: meta_t = 91;
pub const meta_VSV: meta_t = 92;
pub const meta_SCD_PCM: meta_t = 93;
pub const meta_PS2_PCM: meta_t = 94;
pub const meta_PS2_RKV: meta_t = 95;
pub const meta_PS2_VAS: meta_t = 96;
pub const meta_LP_AP_LEP: meta_t = 97;
pub const meta_SDT: meta_t = 98;
pub const meta_STR_SEGA: meta_t = 99;
pub const meta_STR_SEGA_custom: meta_t = 100;
pub const meta_SAP: meta_t = 101;
pub const meta_DC_IDVI: meta_t = 102;
pub const meta_KRAW: meta_t = 103;
pub const meta_OMU: meta_t = 104;
pub const meta_XA2_ACCLAIM: meta_t = 105;
pub const meta_NUB: meta_t = 106;
pub const meta_IDSP_NL: meta_t = 107;
pub const meta_IDSP_IE: meta_t = 108;
pub const meta_SPT_SPD: meta_t = 109;
pub const meta_ISH_ISD: meta_t = 110;
pub const meta_GSND: meta_t = 111;
pub const meta_YDSP: meta_t = 112;
pub const meta_FFCC_STR: meta_t = 113;
pub const meta_UBI_JADE: meta_t = 114;
pub const meta_GCA: meta_t = 115;
pub const meta_NGC_SSM: meta_t = 116;
pub const meta_PS2_JOE: meta_t = 117;
pub const meta_YMF: meta_t = 118;
pub const meta_SADL: meta_t = 119;
pub const meta_FAG: meta_t = 120;
pub const meta_PS2_MIHB: meta_t = 121;
pub const meta_NGC_PDT: meta_t = 122;
pub const meta_DC_ASD: meta_t = 123;
pub const meta_SPSD: meta_t = 124;
pub const meta_RSD: meta_t = 125;
pub const meta_PS2_ASS: meta_t = 126;
pub const meta_SEG: meta_t = 127;
pub const meta_NDS_STRM_FFTA2: meta_t = 128;
pub const meta_KNON: meta_t = 129;
pub const meta_ZWDSP: meta_t = 130;
pub const meta_VGS: meta_t = 131;
pub const meta_DCS_WAV: meta_t = 132;
pub const meta_SMP: meta_t = 133;
pub const meta_WII_SNG: meta_t = 134;
pub const meta_MUL: meta_t = 135;
pub const meta_SAT_BAKA: meta_t = 136;
pub const meta_VSF: meta_t = 137;
pub const meta_PS2_VSF_TTA: meta_t = 138;
pub const meta_ADS_MIDWAY: meta_t = 139;
pub const meta_PS2_SPS: meta_t = 140;
pub const meta_NGC_DSP_KONAMI: meta_t = 141;
pub const meta_UBI_CKD: meta_t = 142;
pub const meta_RAW_WAVM: meta_t = 143;
pub const meta_WVS: meta_t = 144;
pub const meta_XMU: meta_t = 145;
pub const meta_XVAS: meta_t = 146;
pub const meta_EA_SCHL: meta_t = 147;
pub const meta_EA_SCHL_fixed: meta_t = 148;
pub const meta_EA_BNK: meta_t = 149;
pub const meta_EA_1SNH: meta_t = 150;
pub const meta_EA_EACS: meta_t = 151;
pub const meta_RAW_PCM: meta_t = 152;
pub const meta_GENH: meta_t = 153;
pub const meta_AIFC: meta_t = 154;
pub const meta_AIFF: meta_t = 155;
pub const meta_STR_SNDS: meta_t = 156;
pub const meta_WS_AUD: meta_t = 157;
pub const meta_RIFF_WAVE: meta_t = 158;
pub const meta_RIFF_WAVE_POS: meta_t = 159;
pub const meta_RIFF_WAVE_labl: meta_t = 160;
pub const meta_RIFF_WAVE_smpl: meta_t = 161;
pub const meta_RIFF_WAVE_wsmp: meta_t = 162;
pub const meta_RIFF_WAVE_MWV: meta_t = 163;
pub const meta_RIFX_WAVE: meta_t = 164;
pub const meta_RIFX_WAVE_smpl: meta_t = 165;
pub const meta_XNB: meta_t = 166;
pub const meta_PC_MXST: meta_t = 167;
pub const meta_SAB: meta_t = 168;
pub const meta_NWA: meta_t = 169;
pub const meta_NWA_NWAINFOINI: meta_t = 170;
pub const meta_NWA_GAMEEXEINI: meta_t = 171;
pub const meta_SAT_DVI: meta_t = 172;
pub const meta_DC_KCEY: meta_t = 173;
pub const meta_ACM: meta_t = 174;
pub const meta_MUS_ACM: meta_t = 175;
pub const meta_DEC: meta_t = 176;
pub const meta_VS: meta_t = 177;
pub const meta_FFXI_BGW: meta_t = 178;
pub const meta_FFXI_SPW: meta_t = 179;
pub const meta_STS: meta_t = 180;
pub const meta_PS2_P2BT: meta_t = 181;
pub const meta_PS2_GBTS: meta_t = 182;
pub const meta_NGC_DSP_IADP: meta_t = 183;
pub const meta_PS2_MCG: meta_t = 184;
pub const meta_ZSD: meta_t = 185;
pub const meta_REDSPARK: meta_t = 186;
pub const meta_IVAUD: meta_t = 187;
pub const meta_NDS_HWAS: meta_t = 188;
pub const meta_NGC_LPS: meta_t = 189;
pub const meta_NAOMI_ADPCM: meta_t = 190;
pub const meta_SD9: meta_t = 191;
pub const meta_2DX9: meta_t = 192;
pub const meta_PS2_VGV: meta_t = 193;
pub const meta_GCUB: meta_t = 194;
pub const meta_MAXIS_XA: meta_t = 195;
pub const meta_NGC_SCK_DSP: meta_t = 196;
pub const meta_CAFF: meta_t = 197;
pub const meta_EXAKT_SC: meta_t = 198;
pub const meta_WII_WAS: meta_t = 199;
pub const meta_PONA_3DO: meta_t = 200;
pub const meta_PONA_PSX: meta_t = 201;
pub const meta_XBOX_HLWAV: meta_t = 202;
pub const meta_AST_MV: meta_t = 203;
pub const meta_AST_MMV: meta_t = 204;
pub const meta_DMSG: meta_t = 205;
pub const meta_NGC_DSP_AAAP: meta_t = 206;
pub const meta_WB: meta_t = 207;
pub const meta_S14: meta_t = 208;
pub const meta_SSS: meta_t = 209;
pub const meta_PS2_GCM: meta_t = 210;
pub const meta_SMPL: meta_t = 211;
pub const meta_MSA: meta_t = 212;
pub const meta_VOI: meta_t = 213;
pub const meta_P3D: meta_t = 214;
pub const meta_NGC_RKV: meta_t = 215;
pub const meta_DSP_DDSP: meta_t = 216;
pub const meta_NGC_DSP_MPDS: meta_t = 217;
pub const meta_DSP_STR_IG: meta_t = 218;
pub const meta_EA_SWVR: meta_t = 219;
pub const meta_PS2_B1S: meta_t = 220;
pub const meta_DSP_XIII: meta_t = 221;
pub const meta_DSP_CABELAS: meta_t = 222;
pub const meta_PS2_ADM: meta_t = 223;
pub const meta_LPCM_SHADE: meta_t = 224;
pub const meta_PS2_VMS: meta_t = 225;
pub const meta_XAU: meta_t = 226;
pub const meta_GH3_BAR: meta_t = 227;
pub const meta_FFW: meta_t = 228;
pub const meta_DSP_DSPW: meta_t = 229;
pub const meta_PS2_JSTM: meta_t = 230;
pub const meta_SQEX_SCD: meta_t = 231;
pub const meta_NGC_NST_DSP: meta_t = 232;
pub const meta_BAF: meta_t = 233;
pub const meta_XVAG: meta_t = 234;
pub const meta_CPS: meta_t = 235;
pub const meta_MSF: meta_t = 236;
pub const meta_PS3_PAST: meta_t = 237;
pub const meta_SGXD: meta_t = 238;
pub const meta_WII_RAS: meta_t = 239;
pub const meta_SPM: meta_t = 240;
pub const meta_VGS_PS: meta_t = 241;
pub const meta_PS2_IAB: meta_t = 242;
pub const meta_VS_STR: meta_t = 243;
pub const meta_LSF_N1NJ4N: meta_t = 244;
pub const meta_XWAV: meta_t = 245;
pub const meta_RAW_SNDS: meta_t = 246;
pub const meta_PS2_WMUS: meta_t = 247;
pub const meta_HYPERSCAN_KVAG: meta_t = 248;
pub const meta_IOS_PSND: meta_t = 249;
pub const meta_ADP_WILDFIRE: meta_t = 250;
pub const meta_QD_ADP: meta_t = 251;
pub const meta_EB_SFX: meta_t = 252;
pub const meta_EB_SF0: meta_t = 253;
pub const meta_MTAF: meta_t = 254;
pub const meta_ALP: meta_t = 255;
pub const meta_WPD: meta_t = 256;
pub const meta_MN_STR: meta_t = 257;
pub const meta_MSS: meta_t = 258;
pub const meta_PS2_HSF: meta_t = 259;
pub const meta_IVAG: meta_t = 260;
pub const meta_PS2_2PFS: meta_t = 261;
pub const meta_PS2_VBK: meta_t = 262;
pub const meta_OTM: meta_t = 263;
pub const meta_CSTM: meta_t = 264;
pub const meta_FSTM: meta_t = 265;
pub const meta_IDSP_NAMCO: meta_t = 266;
pub const meta_KT_WIIBGM: meta_t = 267;
pub const meta_KTSS: meta_t = 268;
pub const meta_MCA: meta_t = 269;
pub const meta_ADX_MONSTER: meta_t = 270;
pub const meta_HCA: meta_t = 271;
pub const meta_SVAG_SNK: meta_t = 272;
pub const meta_PS2_VDS_VDM: meta_t = 273;
pub const meta_FFMPEG: meta_t = 274;
pub const meta_FFMPEG_faulty: meta_t = 275;
pub const meta_CXS: meta_t = 276;
pub const meta_AKB: meta_t = 277;
pub const meta_PASX: meta_t = 278;
pub const meta_XMA_RIFF: meta_t = 279;
pub const meta_ASTB: meta_t = 280;
pub const meta_WWISE_RIFF: meta_t = 281;
pub const meta_UBI_RAKI: meta_t = 282;
pub const meta_SNDX: meta_t = 283;
pub const meta_OGL: meta_t = 284;
pub const meta_MC3: meta_t = 285;
pub const meta_GHS: meta_t = 286;
pub const meta_AAC_TRIACE: meta_t = 287;
pub const meta_MTA2: meta_t = 288;
pub const meta_XA_XA30: meta_t = 289;
pub const meta_XA_04SW: meta_t = 290;
pub const meta_TXTH: meta_t = 291;
pub const meta_SK_AUD: meta_t = 292;
pub const meta_AHX: meta_t = 293;
pub const meta_STMA: meta_t = 294;
pub const meta_BINK: meta_t = 295;
pub const meta_EA_SNU: meta_t = 296;
pub const meta_AWC: meta_t = 297;
pub const meta_OPUS: meta_t = 298;
pub const meta_PC_AST: meta_t = 299;
pub const meta_NAAC: meta_t = 300;
pub const meta_UBI_SB: meta_t = 301;
pub const meta_EZW: meta_t = 302;
pub const meta_VXN: meta_t = 303;
pub const meta_EA_SNR_SNS: meta_t = 304;
pub const meta_EA_SPS: meta_t = 305;
pub const meta_VID1: meta_t = 306;
pub const meta_PC_FLX: meta_t = 307;
pub const meta_MOGG: meta_t = 308;
pub const meta_OGG_VORBIS: meta_t = 309;
pub const meta_OGG_SLI: meta_t = 310;
pub const meta_OPUS_SLI: meta_t = 311;
pub const meta_OGG_SFL: meta_t = 312;
pub const meta_OGG_KOVS: meta_t = 313;
pub const meta_OGG_encrypted: meta_t = 314;
pub const meta_KMA9: meta_t = 315;
pub const meta_XWC: meta_t = 316;
pub const meta_SQEX_SAB: meta_t = 317;
pub const meta_SQEX_MAB: meta_t = 318;
pub const meta_WAF: meta_t = 319;
pub const meta_WAVE: meta_t = 320;
pub const meta_WAVE_segmented: meta_t = 321;
pub const meta_SMV: meta_t = 322;
pub const meta_NXAP: meta_t = 323;
pub const meta_EA_WVE_AU00: meta_t = 324;
pub const meta_EA_WVE_AD10: meta_t = 325;
pub const meta_STHD: meta_t = 326;
pub const meta_MP4: meta_t = 327;
pub const meta_PCM_SRE: meta_t = 328;
pub const meta_DSP_MCADPCM: meta_t = 329;
pub const meta_UBI_LYN: meta_t = 330;
pub const meta_MSB_MSH: meta_t = 331;
pub const meta_TXTP: meta_t = 332;
pub const meta_SMC_SMH: meta_t = 333;
pub const meta_PPST: meta_t = 334;
pub const meta_SPS_N1: meta_t = 335;
pub const meta_UBI_BAO: meta_t = 336;
pub const meta_DSP_SWITCH_AUDIO: meta_t = 337;
pub const meta_H4M: meta_t = 338;
pub const meta_ASF: meta_t = 339;
pub const meta_XMD: meta_t = 340;
pub const meta_CKS: meta_t = 341;
pub const meta_CKB: meta_t = 342;
pub const meta_WV6: meta_t = 343;
pub const meta_WAVEBATCH: meta_t = 344;
pub const meta_HD3_BD3: meta_t = 345;
pub const meta_BNK_SONY: meta_t = 346;
pub const meta_SSCF: meta_t = 347;
pub const meta_DSP_VAG: meta_t = 348;
pub const meta_DSP_ITL: meta_t = 349;
pub const meta_A2M: meta_t = 350;
pub const meta_AHV: meta_t = 351;
pub const meta_MSV: meta_t = 352;
pub const meta_SDF: meta_t = 353;
pub const meta_SVG: meta_t = 354;
pub const meta_VIS: meta_t = 355;
pub const meta_VAI: meta_t = 356;
pub const meta_AIF_ASOBO: meta_t = 357;
pub const meta_AO: meta_t = 358;
pub const meta_APC: meta_t = 359;
pub const meta_WV2: meta_t = 360;
pub const meta_XAU_KONAMI: meta_t = 361;
pub const meta_DERF: meta_t = 362;
pub const meta_SADF: meta_t = 363;
pub const meta_UTK: meta_t = 364;
pub const meta_NXA1: meta_t = 365;
pub const meta_ADPCM_CAPCOM: meta_t = 366;
pub const meta_UE4OPUS: meta_t = 367;
pub const meta_XWMA: meta_t = 368;
pub const meta_VA3: meta_t = 369;
pub const meta_XOPUS: meta_t = 370;
pub const meta_VS_SQUARE: meta_t = 371;
pub const meta_NWAV: meta_t = 372;
pub const meta_XPCM: meta_t = 373;
pub const meta_MSF_TAMASOFT: meta_t = 374;
pub const meta_XPS_DAT: meta_t = 375;
pub const meta_ZSND: meta_t = 376;
pub const meta_DSP_ADPY: meta_t = 377;
pub const meta_DSP_ADPX: meta_t = 378;
pub const meta_OGG_OPUS: meta_t = 379;
pub const meta_IMC: meta_t = 380;
pub const meta_GIN: meta_t = 381;
pub const meta_DSF: meta_t = 382;
pub const meta_208: meta_t = 383;
pub const meta_DSP_DS2: meta_t = 384;
pub const meta_MUS_VC: meta_t = 385;
pub const meta_STRM_ABYLIGHT: meta_t = 386;
pub const meta_MSF_KONAMI: meta_t = 387;
pub const meta_XWMA_KONAMI: meta_t = 388;
pub const meta_9TAV: meta_t = 389;
pub const meta_BWAV: meta_t = 390;
pub const meta_RAD: meta_t = 391;
pub const meta_SMACKER: meta_t = 392;
pub const meta_MZRT: meta_t = 393;
pub const meta_XAVS: meta_t = 394;
pub const meta_PSF: meta_t = 395;
pub const meta_DSP_ITL_i: meta_t = 396;
pub const meta_IMA: meta_t = 397;
pub const meta_XWV_VALVE: meta_t = 398;
pub const meta_UBI_HX: meta_t = 399;
pub const meta_BMP_KONAMI: meta_t = 400;
pub const meta_ISB: meta_t = 401;
pub const meta_XSSB: meta_t = 402;
pub const meta_XMA_UE3: meta_t = 403;
pub const meta_FWSE: meta_t = 404;
pub const meta_FDA: meta_t = 405;
pub const meta_TGC: meta_t = 406;
pub const meta_KWB: meta_t = 407;
pub const meta_LRMD: meta_t = 408;
pub const meta_WWISE_FX: meta_t = 409;
pub const meta_DIVA: meta_t = 410;
pub const meta_IMUSE: meta_t = 411;
pub const meta_KTSR: meta_t = 412;
pub const meta_KAT: meta_t = 413;
pub const meta_PCM_SUCCESS: meta_t = 414;
pub const meta_ADP_KONAMI: meta_t = 415;
pub const meta_SDRH: meta_t = 416;
pub const meta_WADY: meta_t = 417;
pub const meta_DSP_SQEX: meta_t = 418;
pub const meta_DSP_WIIVOICE: meta_t = 419;
pub const meta_SBK: meta_t = 420;
pub const meta_DSP_WIIADPCM: meta_t = 421;
pub const meta_DSP_CWAC: meta_t = 422;
pub const meta_COMPRESSWAVE: meta_t = 423;
pub const meta_KTAC: meta_t = 424;
pub const meta_MJB_MJH: meta_t = 425;
pub const meta_BSNF: meta_t = 426;
pub const meta_TAC: meta_t = 427;
pub const meta_IDSP_TOSE: meta_t = 428;
pub const meta_DSP_KWA: meta_t = 429;
pub const meta_OGV_3RDEYE: meta_t = 430;
pub const meta_PIFF_TPCM: meta_t = 431;
pub const meta_WXD_WXH: meta_t = 432;
pub const meta_BNK_RELIC: meta_t = 433;
pub const meta_XSH_XSD_XSS: meta_t = 434;
pub const meta_PSB: meta_t = 435;
pub const meta_LOPU_FB: meta_t = 436;
pub const meta_LPCM_FB: meta_t = 437;
pub const meta_WBK: meta_t = 438;
pub const meta_WBK_NSLB: meta_t = 439;
pub const meta_DSP_APEX: meta_t = 440;
pub const meta_MPEG: meta_t = 441;
pub const meta_SSPF: meta_t = 442;
pub const meta_S3V: meta_t = 443;
pub const meta_ESF: meta_t = 444;
pub const meta_ADM: meta_t = 445;
pub const meta_TT_AD: meta_t = 446;
pub const meta_SNDZ: meta_t = 447;
pub const meta_VAB: meta_t = 448;
pub const meta_BIGRP: meta_t = 449;
pub const meta_DIC1: meta_t = 450;
pub const meta_AWD: meta_t = 451;
pub const meta_SQUEAKSTREAM: meta_t = 452;
pub const meta_SQUEAKSAMPLE: meta_t = 453;
pub const meta_SNDS: meta_t = 454;
pub const meta_NXOF: meta_t = 455;
pub type meta_t = ::std::os::raw::c_int;
extern "C" {
    pub fn vgm_log_set_callback(
        ctx_p: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        callback: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct g72x_state {
    pub yl: ::std::os::raw::c_long,
    pub yu: ::std::os::raw::c_short,
    pub dms: ::std::os::raw::c_short,
    pub dml: ::std::os::raw::c_short,
    pub ap: ::std::os::raw::c_short,
    pub a: [::std::os::raw::c_short; 2usize],
    pub b: [::std::os::raw::c_short; 6usize],
    pub pk: [::std::os::raw::c_short; 2usize],
    pub dq: [::std::os::raw::c_short; 6usize],
    pub sr: [::std::os::raw::c_short; 2usize],
    pub td: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_g72x_state() {
    const UNINIT: ::std::mem::MaybeUninit<g72x_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<g72x_state>(),
        52usize,
        concat!("Size of: ", stringify!(g72x_state))
    );
    assert_eq!(
        ::std::mem::align_of::<g72x_state>(),
        4usize,
        concat!("Alignment of ", stringify!(g72x_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(yl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yu) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(yu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dms) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(dms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dml) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(dml)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(ap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pk) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(pk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(dq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sr) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(sr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(g72x_state),
            "::",
            stringify!(td)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct play_config_t {
    pub config_set: ::std::os::raw::c_int,
    pub play_forever: ::std::os::raw::c_int,
    pub ignore_loop: ::std::os::raw::c_int,
    pub force_loop: ::std::os::raw::c_int,
    pub really_force_loop: ::std::os::raw::c_int,
    pub ignore_fade: ::std::os::raw::c_int,
    pub loop_count: f64,
    pub pad_begin: i32,
    pub trim_begin: i32,
    pub body_time: i32,
    pub trim_end: i32,
    pub fade_delay: f64,
    pub fade_time: f64,
    pub pad_end: i32,
    pub pad_begin_s: f64,
    pub trim_begin_s: f64,
    pub body_time_s: f64,
    pub trim_end_s: f64,
    pub pad_end_s: f64,
    pub pad_begin_set: ::std::os::raw::c_int,
    pub trim_begin_set: ::std::os::raw::c_int,
    pub body_time_set: ::std::os::raw::c_int,
    pub loop_count_set: ::std::os::raw::c_int,
    pub trim_end_set: ::std::os::raw::c_int,
    pub fade_delay_set: ::std::os::raw::c_int,
    pub fade_time_set: ::std::os::raw::c_int,
    pub pad_end_set: ::std::os::raw::c_int,
    pub is_txtp: ::std::os::raw::c_int,
    pub is_mini_txtp: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_play_config_t() {
    const UNINIT: ::std::mem::MaybeUninit<play_config_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<play_config_t>(),
        152usize,
        concat!("Size of: ", stringify!(play_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<play_config_t>(),
        8usize,
        concat!("Alignment of ", stringify!(play_config_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_set) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(config_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).play_forever) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(play_forever)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_loop) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(ignore_loop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_loop) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(force_loop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).really_force_loop) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(really_force_loop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_fade) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(ignore_fade)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(loop_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad_begin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(pad_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trim_begin) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(trim_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_time) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(body_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trim_end) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(trim_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_delay) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(fade_delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_time) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(fade_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(pad_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad_begin_s) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(pad_begin_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trim_begin_s) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(trim_begin_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_time_s) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(body_time_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trim_end_s) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(trim_end_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad_end_s) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(pad_end_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad_begin_set) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(pad_begin_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trim_begin_set) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(trim_begin_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_time_set) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(body_time_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_count_set) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(loop_count_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trim_end_set) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(trim_end_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_delay_set) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(fade_delay_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_time_set) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(fade_time_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad_end_set) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(pad_end_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_txtp) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(is_txtp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_mini_txtp) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(play_config_t),
            "::",
            stringify!(is_mini_txtp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct play_state_t {
    pub input_channels: ::std::os::raw::c_int,
    pub output_channels: ::std::os::raw::c_int,
    pub pad_begin_duration: i32,
    pub pad_begin_left: i32,
    pub trim_begin_duration: i32,
    pub trim_begin_left: i32,
    pub body_duration: i32,
    pub fade_duration: i32,
    pub fade_left: i32,
    pub fade_start: i32,
    pub pad_end_duration: i32,
    pub pad_end_start: i32,
    pub play_duration: i32,
    pub play_position: i32,
}
#[test]
fn bindgen_test_layout_play_state_t() {
    const UNINIT: ::std::mem::MaybeUninit<play_state_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<play_state_t>(),
        56usize,
        concat!("Size of: ", stringify!(play_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<play_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(play_state_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_channels) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(input_channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_channels) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(output_channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad_begin_duration) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(pad_begin_duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad_begin_left) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(pad_begin_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trim_begin_duration) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(trim_begin_duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trim_begin_left) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(trim_begin_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_duration) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(body_duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_duration) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(fade_duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_left) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(fade_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_start) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(fade_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad_end_duration) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(pad_end_duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad_end_start) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(pad_end_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).play_duration) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(play_duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).play_position) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(play_state_t),
            "::",
            stringify!(play_position)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VGMSTREAMCHANNEL {
    pub streamfile: *mut STREAMFILE,
    pub channel_start_offset: off_t,
    pub offset: off_t,
    pub frame_header_offset: off_t,
    pub samples_left_in_frame: ::std::os::raw::c_int,
    pub adpcm_coef: [i16; 16usize],
    pub adpcm_coef_3by32: [i32; 96usize],
    pub vadpcm_coefs: [i16; 128usize],
    pub __bindgen_anon_1: VGMSTREAMCHANNEL__bindgen_ty_1,
    pub __bindgen_anon_2: VGMSTREAMCHANNEL__bindgen_ty_2,
    pub __bindgen_anon_3: VGMSTREAMCHANNEL__bindgen_ty_3,
    pub __bindgen_anon_4: VGMSTREAMCHANNEL__bindgen_ty_4,
    pub adpcm_step_index: ::std::os::raw::c_int,
    pub adpcm_scale: ::std::os::raw::c_int,
    pub g72x_state: g72x_state,
    pub adx_channels: ::std::os::raw::c_int,
    pub adx_xor: u16,
    pub adx_mult: u16,
    pub adx_add: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VGMSTREAMCHANNEL__bindgen_ty_1 {
    pub adpcm_history1_16: i16,
    pub adpcm_history1_32: i32,
}
#[test]
fn bindgen_test_layout_VGMSTREAMCHANNEL__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<VGMSTREAMCHANNEL__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VGMSTREAMCHANNEL__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(VGMSTREAMCHANNEL__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<VGMSTREAMCHANNEL__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(VGMSTREAMCHANNEL__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_history1_16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL__bindgen_ty_1),
            "::",
            stringify!(adpcm_history1_16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_history1_32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL__bindgen_ty_1),
            "::",
            stringify!(adpcm_history1_32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VGMSTREAMCHANNEL__bindgen_ty_2 {
    pub adpcm_history2_16: i16,
    pub adpcm_history2_32: i32,
}
#[test]
fn bindgen_test_layout_VGMSTREAMCHANNEL__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<VGMSTREAMCHANNEL__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VGMSTREAMCHANNEL__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(VGMSTREAMCHANNEL__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<VGMSTREAMCHANNEL__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(VGMSTREAMCHANNEL__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_history2_16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL__bindgen_ty_2),
            "::",
            stringify!(adpcm_history2_16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_history2_32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL__bindgen_ty_2),
            "::",
            stringify!(adpcm_history2_32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VGMSTREAMCHANNEL__bindgen_ty_3 {
    pub adpcm_history3_16: i16,
    pub adpcm_history3_32: i32,
}
#[test]
fn bindgen_test_layout_VGMSTREAMCHANNEL__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<VGMSTREAMCHANNEL__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VGMSTREAMCHANNEL__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(VGMSTREAMCHANNEL__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<VGMSTREAMCHANNEL__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(VGMSTREAMCHANNEL__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_history3_16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL__bindgen_ty_3),
            "::",
            stringify!(adpcm_history3_16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_history3_32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL__bindgen_ty_3),
            "::",
            stringify!(adpcm_history3_32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VGMSTREAMCHANNEL__bindgen_ty_4 {
    pub adpcm_history4_16: i16,
    pub adpcm_history4_32: i32,
}
#[test]
fn bindgen_test_layout_VGMSTREAMCHANNEL__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<VGMSTREAMCHANNEL__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VGMSTREAMCHANNEL__bindgen_ty_4>(),
        4usize,
        concat!("Size of: ", stringify!(VGMSTREAMCHANNEL__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<VGMSTREAMCHANNEL__bindgen_ty_4>(),
        4usize,
        concat!("Alignment of ", stringify!(VGMSTREAMCHANNEL__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_history4_16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL__bindgen_ty_4),
            "::",
            stringify!(adpcm_history4_16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_history4_32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL__bindgen_ty_4),
            "::",
            stringify!(adpcm_history4_32)
        )
    );
}
#[test]
fn bindgen_test_layout_VGMSTREAMCHANNEL() {
    const UNINIT: ::std::mem::MaybeUninit<VGMSTREAMCHANNEL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VGMSTREAMCHANNEL>(),
        784usize,
        concat!("Size of: ", stringify!(VGMSTREAMCHANNEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VGMSTREAMCHANNEL>(),
        8usize,
        concat!("Alignment of ", stringify!(VGMSTREAMCHANNEL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamfile) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(streamfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel_start_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(channel_start_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_header_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(frame_header_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samples_left_in_frame) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(samples_left_in_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_coef) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(adpcm_coef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_coef_3by32) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(adpcm_coef_3by32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vadpcm_coefs) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(vadpcm_coefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_step_index) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(adpcm_step_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adpcm_scale) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(adpcm_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g72x_state) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(g72x_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adx_channels) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(adx_channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adx_xor) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(adx_xor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adx_mult) as usize - ptr as usize },
        778usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(adx_mult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adx_add) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAMCHANNEL),
            "::",
            stringify!(adx_add)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VGMSTREAM {
    pub num_samples: i32,
    pub sample_rate: i32,
    pub channels: ::std::os::raw::c_int,
    pub coding_type: coding_t,
    pub layout_type: layout_t,
    pub meta_type: meta_t,
    pub loop_flag: ::std::os::raw::c_int,
    pub loop_start_sample: i32,
    pub loop_end_sample: i32,
    pub interleave_block_size: usize,
    pub interleave_first_block_size: usize,
    pub interleave_first_skip: usize,
    pub interleave_last_block_size: usize,
    pub frame_size: usize,
    pub num_streams: ::std::os::raw::c_int,
    pub stream_index: ::std::os::raw::c_int,
    pub stream_size: usize,
    pub stream_name: [::std::os::raw::c_char; 255usize],
    pub channel_layout: u32,
    pub allow_dual_stereo: ::std::os::raw::c_int,
    pub full_block_size: usize,
    pub current_sample: i32,
    pub samples_into_block: i32,
    pub current_block_offset: off_t,
    pub current_block_size: usize,
    pub current_block_samples: i32,
    pub next_block_offset: off_t,
    pub loop_current_sample: i32,
    pub loop_samples_into_block: i32,
    pub loop_block_offset: off_t,
    pub loop_block_size: usize,
    pub loop_block_samples: i32,
    pub loop_next_block_offset: off_t,
    pub hit_loop: ::std::os::raw::c_int,
    pub codec_endian: ::std::os::raw::c_int,
    pub codec_config: ::std::os::raw::c_int,
    pub ws_output_size: i32,
    pub ch: *mut VGMSTREAMCHANNEL,
    pub start_ch: *mut VGMSTREAMCHANNEL,
    pub loop_ch: *mut VGMSTREAMCHANNEL,
    pub start_vgmstream: *mut ::std::os::raw::c_void,
    pub mixing_data: *mut ::std::os::raw::c_void,
    pub codec_data: *mut ::std::os::raw::c_void,
    pub layout_data: *mut ::std::os::raw::c_void,
    pub config_enabled: ::std::os::raw::c_int,
    pub config: play_config_t,
    pub pstate: play_state_t,
    pub loop_count: ::std::os::raw::c_int,
    pub loop_target: ::std::os::raw::c_int,
    pub tmpbuf: *mut sample_t,
    pub tmpbuf_size: usize,
}
#[test]
fn bindgen_test_layout_VGMSTREAM() {
    const UNINIT: ::std::mem::MaybeUninit<VGMSTREAM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VGMSTREAM>(),
        744usize,
        concat!("Size of: ", stringify!(VGMSTREAM))
    );
    assert_eq!(
        ::std::mem::align_of::<VGMSTREAM>(),
        8usize,
        concat!("Alignment of ", stringify!(VGMSTREAM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_samples) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(num_samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample_rate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coding_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(coding_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(layout_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meta_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(meta_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_flag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_start_sample) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_start_sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_end_sample) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_end_sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interleave_block_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(interleave_block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interleave_first_block_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(interleave_first_block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interleave_first_skip) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(interleave_first_skip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interleave_last_block_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(interleave_last_block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(frame_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_streams) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(num_streams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_index) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(stream_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_size) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(stream_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_name) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(stream_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel_layout) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(channel_layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_dual_stereo) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(allow_dual_stereo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_block_size) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(full_block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_sample) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(current_sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samples_into_block) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(samples_into_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_block_offset) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(current_block_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_block_size) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(current_block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_block_samples) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(current_block_samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_block_offset) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(next_block_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_current_sample) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_current_sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_samples_into_block) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_samples_into_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_block_offset) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_block_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_block_size) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_block_samples) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_block_samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_next_block_offset) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_next_block_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hit_loop) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(hit_loop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codec_endian) as usize - ptr as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(codec_endian)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codec_config) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(codec_config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_output_size) as usize - ptr as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(ws_output_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ch) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(ch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_ch) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(start_ch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_ch) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_ch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_vgmstream) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(start_vgmstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixing_data) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(mixing_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codec_data) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(codec_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout_data) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(layout_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config_enabled) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(config_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstate) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(pstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_count) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_target) as usize - ptr as usize },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(loop_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpbuf) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(tmpbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpbuf_size) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(VGMSTREAM),
            "::",
            stringify!(tmpbuf_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct segmented_layout_data {
    pub segment_count: ::std::os::raw::c_int,
    pub segments: *mut *mut VGMSTREAM,
    pub current_segment: ::std::os::raw::c_int,
    pub buffer: *mut sample_t,
    pub input_channels: ::std::os::raw::c_int,
    pub output_channels: ::std::os::raw::c_int,
    pub mixed_channels: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_segmented_layout_data() {
    const UNINIT: ::std::mem::MaybeUninit<segmented_layout_data> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<segmented_layout_data>(),
        48usize,
        concat!("Size of: ", stringify!(segmented_layout_data))
    );
    assert_eq!(
        ::std::mem::align_of::<segmented_layout_data>(),
        8usize,
        concat!("Alignment of ", stringify!(segmented_layout_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(segmented_layout_data),
            "::",
            stringify!(segment_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segments) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(segmented_layout_data),
            "::",
            stringify!(segments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_segment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(segmented_layout_data),
            "::",
            stringify!(current_segment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(segmented_layout_data),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_channels) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(segmented_layout_data),
            "::",
            stringify!(input_channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_channels) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(segmented_layout_data),
            "::",
            stringify!(output_channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixed_channels) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(segmented_layout_data),
            "::",
            stringify!(mixed_channels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layered_layout_data {
    pub layer_count: ::std::os::raw::c_int,
    pub layers: *mut *mut VGMSTREAM,
    pub buffer: *mut sample_t,
    pub input_channels: ::std::os::raw::c_int,
    pub output_channels: ::std::os::raw::c_int,
    pub external_looping: ::std::os::raw::c_int,
    pub curr_layer: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_layered_layout_data() {
    const UNINIT: ::std::mem::MaybeUninit<layered_layout_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<layered_layout_data>(),
        40usize,
        concat!("Size of: ", stringify!(layered_layout_data))
    );
    assert_eq!(
        ::std::mem::align_of::<layered_layout_data>(),
        8usize,
        concat!("Alignment of ", stringify!(layered_layout_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(layered_layout_data),
            "::",
            stringify!(layer_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(layered_layout_data),
            "::",
            stringify!(layers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(layered_layout_data),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_channels) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(layered_layout_data),
            "::",
            stringify!(input_channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_channels) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(layered_layout_data),
            "::",
            stringify!(output_channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_looping) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(layered_layout_data),
            "::",
            stringify!(external_looping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curr_layer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(layered_layout_data),
            "::",
            stringify!(curr_layer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vgmstream_info {
    pub sample_rate: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_int,
    pub mixing_info: vgmstream_info_mixing_info,
    pub channel_layout: ::std::os::raw::c_int,
    pub loop_info: vgmstream_info_loop_info,
    pub num_samples: usize,
    pub encoding: [::std::os::raw::c_char; 128usize],
    pub layout: [::std::os::raw::c_char; 128usize],
    pub interleave_info: vgmstream_info_interleave_info,
    pub frame_size: ::std::os::raw::c_int,
    pub metadata: [::std::os::raw::c_char; 128usize],
    pub bitrate: ::std::os::raw::c_int,
    pub stream_info: vgmstream_info_stream_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vgmstream_info_mixing_info {
    pub input_channels: ::std::os::raw::c_int,
    pub output_channels: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vgmstream_info_mixing_info() {
    const UNINIT: ::std::mem::MaybeUninit<vgmstream_info_mixing_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vgmstream_info_mixing_info>(),
        8usize,
        concat!("Size of: ", stringify!(vgmstream_info_mixing_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vgmstream_info_mixing_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vgmstream_info_mixing_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_channels) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info_mixing_info),
            "::",
            stringify!(input_channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_channels) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info_mixing_info),
            "::",
            stringify!(output_channels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vgmstream_info_loop_info {
    pub start: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vgmstream_info_loop_info() {
    const UNINIT: ::std::mem::MaybeUninit<vgmstream_info_loop_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vgmstream_info_loop_info>(),
        8usize,
        concat!("Size of: ", stringify!(vgmstream_info_loop_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vgmstream_info_loop_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vgmstream_info_loop_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info_loop_info),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info_loop_info),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vgmstream_info_interleave_info {
    pub value: ::std::os::raw::c_int,
    pub first_block: ::std::os::raw::c_int,
    pub last_block: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vgmstream_info_interleave_info() {
    const UNINIT: ::std::mem::MaybeUninit<vgmstream_info_interleave_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vgmstream_info_interleave_info>(),
        12usize,
        concat!("Size of: ", stringify!(vgmstream_info_interleave_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vgmstream_info_interleave_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vgmstream_info_interleave_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info_interleave_info),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_block) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info_interleave_info),
            "::",
            stringify!(first_block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_block) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info_interleave_info),
            "::",
            stringify!(last_block)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vgmstream_info_stream_info {
    pub current: ::std::os::raw::c_int,
    pub total: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_vgmstream_info_stream_info() {
    const UNINIT: ::std::mem::MaybeUninit<vgmstream_info_stream_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vgmstream_info_stream_info>(),
        136usize,
        concat!("Size of: ", stringify!(vgmstream_info_stream_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vgmstream_info_stream_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vgmstream_info_stream_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info_stream_info),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info_stream_info),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info_stream_info),
            "::",
            stringify!(name)
        )
    );
}
#[test]
fn bindgen_test_layout_vgmstream_info() {
    const UNINIT: ::std::mem::MaybeUninit<vgmstream_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vgmstream_info>(),
        584usize,
        concat!("Size of: ", stringify!(vgmstream_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vgmstream_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vgmstream_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample_rate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(sample_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixing_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(mixing_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel_layout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(channel_layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_info) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(loop_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_samples) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(num_samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoding) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interleave_info) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(interleave_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_size) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(frame_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitrate) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(bitrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_info) as usize - ptr as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_info),
            "::",
            stringify!(stream_info)
        )
    );
}
extern "C" {
    pub fn init_vgmstream(filename: *const ::std::os::raw::c_char) -> *mut VGMSTREAM;
}
extern "C" {
    pub fn init_vgmstream_from_STREAMFILE(sf: *mut STREAMFILE) -> *mut VGMSTREAM;
}
extern "C" {
    pub fn reset_vgmstream(vgmstream: *mut VGMSTREAM);
}
extern "C" {
    pub fn close_vgmstream(vgmstream: *mut VGMSTREAM);
}
extern "C" {
    pub fn get_vgmstream_play_samples(
        looptimes: f64,
        fadeseconds: f64,
        fadedelayseconds: f64,
        vgmstream: *mut VGMSTREAM,
    ) -> i32;
}
extern "C" {
    pub fn render_vgmstream(
        buffer: *mut sample_t,
        sample_count: i32,
        vgmstream: *mut VGMSTREAM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seek_vgmstream(vgmstream: *mut VGMSTREAM, seek_sample: i32);
}
extern "C" {
    pub fn describe_vgmstream(
        vgmstream: *mut VGMSTREAM,
        desc: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn describe_vgmstream_info(vgmstream: *mut VGMSTREAM, desc: *mut vgmstream_info);
}
extern "C" {
    pub fn get_vgmstream_average_bitrate(vgmstream: *mut VGMSTREAM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vgmstream_get_formats(size: *mut usize) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn vgmstream_get_common_formats(size: *mut usize) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn vgmstream_force_loop(
        vgmstream: *mut VGMSTREAM,
        loop_flag: ::std::os::raw::c_int,
        loop_start_sample: ::std::os::raw::c_int,
        loop_end_sample: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vgmstream_set_loop_target(vgmstream: *mut VGMSTREAM, loop_target: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vgmstream_is_virtual_filename(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn allocate_vgmstream(
        channel_count: ::std::os::raw::c_int,
        looped: ::std::os::raw::c_int,
    ) -> *mut VGMSTREAM;
}
extern "C" {
    pub fn setup_vgmstream(vgmstream: *mut VGMSTREAM);
}
extern "C" {
    pub fn vgmstream_open_stream(
        vgmstream: *mut VGMSTREAM,
        sf: *mut STREAMFILE,
        start_offset: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vgmstream_open_stream_bf(
        vgmstream: *mut VGMSTREAM,
        sf: *mut STREAMFILE,
        start_offset: off_t,
        force_multibuffer: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_vgmstream_coding_description(
        vgmstream: *mut VGMSTREAM,
        out: *mut ::std::os::raw::c_char,
        out_size: usize,
    );
}
extern "C" {
    pub fn get_vgmstream_layout_description(
        vgmstream: *mut VGMSTREAM,
        out: *mut ::std::os::raw::c_char,
        out_size: usize,
    );
}
extern "C" {
    pub fn get_vgmstream_meta_description(
        vgmstream: *mut VGMSTREAM,
        out: *mut ::std::os::raw::c_char,
        out_size: usize,
    );
}
extern "C" {
    pub fn setup_state_vgmstream(vgmstream: *mut VGMSTREAM);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vgmstream_ctx_valid_cfg {
    pub is_extension: ::std::os::raw::c_int,
    pub skip_standard: ::std::os::raw::c_int,
    pub reject_extensionless: ::std::os::raw::c_int,
    pub accept_unknown: ::std::os::raw::c_int,
    pub accept_common: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vgmstream_ctx_valid_cfg() {
    const UNINIT: ::std::mem::MaybeUninit<vgmstream_ctx_valid_cfg> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vgmstream_ctx_valid_cfg>(),
        20usize,
        concat!("Size of: ", stringify!(vgmstream_ctx_valid_cfg))
    );
    assert_eq!(
        ::std::mem::align_of::<vgmstream_ctx_valid_cfg>(),
        4usize,
        concat!("Alignment of ", stringify!(vgmstream_ctx_valid_cfg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_extension) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_ctx_valid_cfg),
            "::",
            stringify!(is_extension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_standard) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_ctx_valid_cfg),
            "::",
            stringify!(skip_standard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reject_extensionless) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_ctx_valid_cfg),
            "::",
            stringify!(reject_extensionless)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept_unknown) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_ctx_valid_cfg),
            "::",
            stringify!(accept_unknown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept_common) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_ctx_valid_cfg),
            "::",
            stringify!(accept_common)
        )
    );
}
extern "C" {
    pub fn vgmstream_ctx_is_valid(
        filename: *const ::std::os::raw::c_char,
        cfg: *mut vgmstream_ctx_valid_cfg,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vgmstream_cfg_t {
    pub allow_play_forever: ::std::os::raw::c_int,
    pub disable_config_override: ::std::os::raw::c_int,
    pub play_forever: ::std::os::raw::c_int,
    pub ignore_loop: ::std::os::raw::c_int,
    pub force_loop: ::std::os::raw::c_int,
    pub really_force_loop: ::std::os::raw::c_int,
    pub ignore_fade: ::std::os::raw::c_int,
    pub loop_count: f64,
    pub fade_delay: f64,
    pub fade_time: f64,
}
#[test]
fn bindgen_test_layout_vgmstream_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<vgmstream_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vgmstream_cfg_t>(),
        56usize,
        concat!("Size of: ", stringify!(vgmstream_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vgmstream_cfg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(vgmstream_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_play_forever) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_cfg_t),
            "::",
            stringify!(allow_play_forever)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable_config_override) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_cfg_t),
            "::",
            stringify!(disable_config_override)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).play_forever) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_cfg_t),
            "::",
            stringify!(play_forever)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_loop) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_cfg_t),
            "::",
            stringify!(ignore_loop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_loop) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_cfg_t),
            "::",
            stringify!(force_loop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).really_force_loop) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_cfg_t),
            "::",
            stringify!(really_force_loop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_fade) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_cfg_t),
            "::",
            stringify!(ignore_fade)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_cfg_t),
            "::",
            stringify!(loop_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_delay) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_cfg_t),
            "::",
            stringify!(fade_delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_time) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_cfg_t),
            "::",
            stringify!(fade_time)
        )
    );
}
extern "C" {
    pub fn vgmstream_apply_config(vgmstream: *mut VGMSTREAM, pcfg: *mut vgmstream_cfg_t);
}
extern "C" {
    pub fn vgmstream_get_samples(vgmstream: *mut VGMSTREAM) -> i32;
}
extern "C" {
    pub fn vgmstream_get_play_forever(vgmstream: *mut VGMSTREAM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vgmstream_set_play_forever(vgmstream: *mut VGMSTREAM, enabled: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vgmstream_title_t {
    pub force_title: ::std::os::raw::c_int,
    pub subsong_range: ::std::os::raw::c_int,
    pub remove_extension: ::std::os::raw::c_int,
    pub remove_archive: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vgmstream_title_t() {
    const UNINIT: ::std::mem::MaybeUninit<vgmstream_title_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vgmstream_title_t>(),
        16usize,
        concat!("Size of: ", stringify!(vgmstream_title_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vgmstream_title_t>(),
        4usize,
        concat!("Alignment of ", stringify!(vgmstream_title_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_title) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_title_t),
            "::",
            stringify!(force_title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subsong_range) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_title_t),
            "::",
            stringify!(subsong_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remove_extension) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_title_t),
            "::",
            stringify!(remove_extension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remove_archive) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vgmstream_title_t),
            "::",
            stringify!(remove_archive)
        )
    );
}
extern "C" {
    pub fn vgmstream_get_title(
        buf: *mut ::std::os::raw::c_char,
        buf_len: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        vgmstream: *mut VGMSTREAM,
        cfg: *mut vgmstream_title_t,
    );
}
pub const VGM_LOG_LEVEL_INFO: _bindgen_ty_2 = 1;
pub const VGM_LOG_LEVEL_DEBUG: _bindgen_ty_2 = 2;
pub const VGM_LOG_LEVEL_ALL: _bindgen_ty_2 = 100;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
extern "C" {
    pub fn vgmstream_set_log_callback(
        level: ::std::os::raw::c_int,
        callback: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn vgmstream_set_log_stdout(level: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VGMSTREAM_TAGS {
    _unused: [u8; 0],
}
extern "C" {
    pub fn vgmstream_tags_init(
        tag_key: *mut *const ::std::os::raw::c_char,
        tag_val: *mut *const ::std::os::raw::c_char,
    ) -> *mut VGMSTREAM_TAGS;
}
extern "C" {
    pub fn vgmstream_tags_reset(
        tags: *mut VGMSTREAM_TAGS,
        target_filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn vgmstream_tags_next_tag(
        tags: *mut VGMSTREAM_TAGS,
        tagfile: *mut STREAMFILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vgmstream_tags_close(tags: *mut VGMSTREAM_TAGS);
}
extern "C" {
    pub fn vgmstream_mixing_enable(
        vgmstream: *mut VGMSTREAM,
        max_sample_count: i32,
        input_channels: *mut ::std::os::raw::c_int,
        output_channels: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vgmstream_mixing_autodownmix(
        vgmstream: *mut VGMSTREAM,
        max_channels: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vgmstream_mixing_stereo_only(vgmstream: *mut VGMSTREAM, start: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
